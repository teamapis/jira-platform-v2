post:
  tags:
    - Jira expressions
  summary: Evaluate Jira expression
  description: >-
    Evaluates a Jira expression and returns its value.


    This resource can be used to test Jira expressions that you plan to use
    elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions
    documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/)
    for more details.


    #### Context variables ####


    The following context variables are available to Jira expressions evaluated
    by this resource. Their presence depends on various factors; usually you
    need to manually request them in the context object sent in the payload, but
    some of them are added automatically under certain conditions.

     *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
     *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).
     *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
     *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
     *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
     *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
     *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
     *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
     *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.

    Also, custom context variables can be passed in the request with their
    types. Those variables can be accessed by key in the Jira expression. These
    variable types are available for use in a custom context:

     *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
     *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
     *  `json`: A JSON object containing custom content.
     *  `list`: A JSON list of `user`, `issue`, or `json` variable types.

    This operation can be accessed anonymously.


    **[Permissions](#permissions) required**: None. However, an expression may
    return different results for different users depending on their permissions.
    For example, different users may see different comments on the same issue.  

    Permission to access Jira Software is required to access Jira Software
    context variables (`board` and `sprint`) or fields (for example,
    `issue.sprint`).
  operationId: evaluateJiraExpression
  parameters:
    - name: expand
      in: query
      description: >-
        Use [expand](#expansion) to include additional information in the
        response. This parameter accepts `meta.complexity` that returns
        information about the expression complexity. For example, the number of
        expensive operations used by the expression and how close the expression
        is to reaching the [complexity
        limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions).
        Useful when designing and debugging your expressions.
      schema:
        type: string
  requestBody:
    description: The Jira expression and the evaluation context.
    content:
      application/json:
        schema:
          $ref: ../components/schemas/JiraExpressionEvalRequestBean.yaml
        example:
          expression: >-
            { key: issue.key, type: issue.issueType.name, links:
            issue.links.map(link => link.linkedIssue.id), listCustomVariable:
            issuesList.includes(issue), customVariables: myUser.accountId ==
            config.userId}
          context:
            issue:
              key: ACJIRA-1470
            sprint: 10001
            custom:
              myUser:
                accountId: '100001'
                type: user
              issuesList:
                - type: issue
                  key: ACJIRA-1471
                - id: 100001
                  type: issue
              nullField:
                type: json
              config:
                type: json
                value:
                  userId: '10002'
            project:
              key: ACJIRA
            serviceDesk: 10023
            issues:
              jql:
                maxResults: 100
                query: project = HSP
                startAt: 0
                validation: strict
            board: 10100
            customerRequest: 1450
    required: true
  responses:
    '200':
      description: >-
        Returned if the evaluation results in a value. The result is a JSON
        primitive value, list, or object.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/JiraExpressionResult.yaml
          example: >-
            {"value":"The expression's result. This value can be any JSON, not
            necessarily a
            String","meta":{"complexity":{"steps":{"value":1,"limit":10000},"expensiveOperations":{"value":3,"limit":10},"beans":{"value":0,"limit":1000},"primitiveValues":{"value":1,"limit":10000}},"issues":{"jql":{"startAt":0,"maxResults":1000,"count":140,"totalCount":140,"validationWarnings":["There
            is a problem with the JQL query."]}}}}
    '400':
      description: |-
        Returned if:

         *  the request is invalid, that is:
            
             *  invalid data is provided, such as a request including issue ID and key.
             *  the expression is invalid and can not be parsed.
         *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression `issue.id` where `issue` is `null`). In this case an error message is provided.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/ErrorCollection.yaml
          example: >-
            {"errorMessages":["Evaluation failed: \"issue['a' + 'b']\" -
            Unrecognized property of `issue`: \"ab\" ('a' + 'b'). Available
            properties of type 'Issue' are: 'assignee', 'comments',
            'description', 'id', 'issueType', 'key', 'priority', 'project',
            'properties', 'reporter', 'status', 'summary'"],"errors":{}}
    '401':
      description: Returned if the authentication credentials are incorrect or missing.
    '404':
      description: >-
        Returned if any object provided in the request context is not found or
        the user does not have permission to view it.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/ErrorCollection.yaml
          example: >-
            {"errorMessages":["Issue does not exist or you do not have
            permission to see it."],"errors":{}}
  deprecated: false
  security:
    - basicAuth: []
    - OAuth2:
        - read:jira-work
        - read:jira-user
    - {}
  x-atlassian-oauth2-scopes:
    - state: Current
      scheme: OAuth2
      scopes:
        - read:jira-work
        - read:jira-user
    - state: Beta
      scheme: OAuth2
      scopes:
        - read:jira-expressions:jira
  x-atlassian-connect-scope: READ
