get:
  tags:
    - Permission schemes
  summary: Get all permission schemes
  description: >-
    Returns all permission schemes.


    ### About permission schemes and grants ###


    A permission scheme is a collection of permission grants. A permission grant
    consists of a `holder` and a `permission`.


    #### Holder object ####


    The `holder` object contains information about the user or group being
    granted the permission. For example, the *Administer projects* permission is
    granted to a group named *Teams in space administrators*. In this case, the
    type is `"type": "group"`, and the parameter is the group name,
    `"parameter": "Teams in space administrators"` and the value is group ID,
    `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`. The `holder` object is
    defined by the following properties:

     *  `type` Identifies the user or group (see the list of types below).
     *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
     *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`

    The following `types` are available. The expected values for `parameter` and
    `value` are given in parentheses (some types may not have a `parameter` or
    `value`):

     *  `anyone` Grant for anonymous users.
     *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
     *  `assignee` Grant for the user currently assigned to an issue.
     *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
     *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
     *  `projectLead` Grant for a project lead.
     *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
     *  `reporter` Grant for the user who reported the issue.
     *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
     *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).
     *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).

    #### Built-in permissions ####


    The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg)
    are listed below. Apps can also define custom permissions. See the [project
    permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/)
    and [global
    permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/)
    module documentation for more information.


    **Project permissions**

     *  `ADMINISTER_PROJECTS`
     *  `BROWSE_PROJECTS`
     *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
     *  `SERVICEDESK_AGENT` (Jira Service Desk only)
     *  `VIEW_DEV_TOOLS` (Jira Software only)
     *  `VIEW_READONLY_WORKFLOW`

    **Issue permissions**

     *  `ASSIGNABLE_USER`
     *  `ASSIGN_ISSUES`
     *  `CLOSE_ISSUES`
     *  `CREATE_ISSUES`
     *  `DELETE_ISSUES`
     *  `EDIT_ISSUES`
     *  `LINK_ISSUES`
     *  `MODIFY_REPORTER`
     *  `MOVE_ISSUES`
     *  `RESOLVE_ISSUES`
     *  `SCHEDULE_ISSUES`
     *  `SET_ISSUE_SECURITY`
     *  `TRANSITION_ISSUES`

    **Voters and watchers permissions**

     *  `MANAGE_WATCHERS`
     *  `VIEW_VOTERS_AND_WATCHERS`

    **Comments permissions**

     *  `ADD_COMMENTS`
     *  `DELETE_ALL_COMMENTS`
     *  `DELETE_OWN_COMMENTS`
     *  `EDIT_ALL_COMMENTS`
     *  `EDIT_OWN_COMMENTS`

    **Attachments permissions**

     *  `CREATE_ATTACHMENTS`
     *  `DELETE_ALL_ATTACHMENTS`
     *  `DELETE_OWN_ATTACHMENTS`

    **Time tracking permissions**

     *  `DELETE_ALL_WORKLOGS`
     *  `DELETE_OWN_WORKLOGS`
     *  `EDIT_ALL_WORKLOGS`
     *  `EDIT_OWN_WORKLOGS`
     *  `WORK_ON_ISSUES`

    **[Permissions](#permissions) required:** Permission to access Jira.
  operationId: getAllPermissionSchemes
  parameters:
    - name: expand
      in: query
      description: >-
        Use expand to include additional information in the response. This
        parameter accepts a comma-separated list. Note that permissions are
        included when you specify any value. Expand options include:

         *  `all` Returns all expandable information.
         *  `field` Returns information about the custom field granted the permission.
         *  `group` Returns information about the group that is granted the permission.
         *  `permissions` Returns all permission grants for each permission scheme.
         *  `projectRole` Returns information about the project role granted the permission.
         *  `user` Returns information about the user who is granted the permission.
      schema:
        type: string
  responses:
    '200':
      description: Returned if the request is successful.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/PermissionSchemes.yaml
          example: >-
            {"permissionSchemes":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/2/permissionscheme/10000","name":"Example
            permission scheme","description":"description"}]}
    '401':
      description: Returned if the authentication credentials are incorrect or missing.
  deprecated: false
  security:
    - basicAuth: []
    - OAuth2:
        - read:jira-work
  x-atlassian-oauth2-scopes:
    - state: Current
      scheme: OAuth2
      scopes:
        - read:jira-work
    - state: Beta
      scheme: OAuth2
      scopes:
        - read:application-role:jira
        - read:field:jira
        - read:group:jira
        - read:permission-scheme:jira
        - read:permission:jira
        - read:project-role:jira
        - read:user:jira
        - read:avatar:jira
        - read:project-category:jira
        - read:project:jira
  x-atlassian-connect-scope: READ
post:
  tags:
    - Permission schemes
  summary: Create permission scheme
  description: >-
    Creates a new permission scheme. You can create a permission scheme with or
    without defining a set of permission grants.


    **[Permissions](#permissions) required:** *Administer Jira* [global
    permission](https://confluence.atlassian.com/x/x4dKLg).
  operationId: createPermissionScheme
  parameters:
    - name: expand
      in: query
      description: >-
        Use expand to include additional information in the response. This
        parameter accepts a comma-separated list. Note that permissions are
        always included when you specify any value. Expand options include:

         *  `all` Returns all expandable information.
         *  `field` Returns information about the custom field granted the permission.
         *  `group` Returns information about the group that is granted the permission.
         *  `permissions` Returns all permission grants for each permission scheme.
         *  `projectRole` Returns information about the project role granted the permission.
         *  `user` Returns information about the user who is granted the permission.
      schema:
        type: string
  requestBody:
    description: The permission scheme to create.
    content:
      application/json:
        schema:
          $ref: ../components/schemas/PermissionScheme.yaml
        example:
          permissions:
            - holder:
                parameter: jira-core-users
                type: group
                value: ca85fac0-d974-40ca-a615-7af99c48d24f
              permission: ADMINISTER_PROJECTS
          name: Example permission scheme
          description: description
    required: true
  responses:
    '201':
      description: Returned if the permission scheme is created.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/PermissionScheme.yaml
          example: >-
            {"id":10000,"self":"https://your-domain.atlassian.net/rest/api/2/permissionscheme/10000","name":"Example
            permission
            scheme","description":"description","permissions":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/2/permissionscheme/permission/10000","holder":{"type":"group","parameter":"jira-core-users","value":"ca85fac0-d974-40ca-a615-7af99c48d24f","expand":"group"},"permission":"ADMINISTER_PROJECTS"}]}
    '400':
      description: Returned if the request is invalid.
    '401':
      description: Returned if the authentication credentials are incorrect or missing.
    '403':
      description: >-
        Returned if the user does not have the necessary permission or the
        feature is not available in the Jira plan.
  deprecated: false
  security:
    - basicAuth: []
    - OAuth2:
        - manage:jira-configuration
  x-atlassian-oauth2-scopes:
    - state: Current
      scheme: OAuth2
      scopes:
        - manage:jira-configuration
    - state: Beta
      scheme: OAuth2
      scopes:
        - write:permission-scheme:jira
        - read:application-role:jira
        - read:field:jira
        - read:group:jira
        - read:permission-scheme:jira
        - read:permission:jira
        - read:project-role:jira
        - read:user:jira
        - read:avatar:jira
        - read:project-category:jira
        - read:project:jira
  x-atlassian-connect-scope: ADMIN
