get:
  tags:
    - Issues
  summary: Get create issue metadata
  description: >-
    Returns details of projects, issue types within projects, and, when
    requested, the create screen fields for each issue type for the user. Use
    the information to populate the requests in [ Create
    issue](#api-rest-api-2-issue-post) and [Create
    issues](#api-rest-api-2-issue-bulk-post).


    The request can be restricted to specific projects or issue types using the
    query parameters. The response will contain information for the valid
    projects, issue types, or project and issue type combinations requested.
    Note that invalid project, issue type, or project and issue type
    combinations do not generate errors.


    This operation can be accessed anonymously.


    **[Permissions](#permissions) required:** *Create issues* [project
    permission](https://confluence.atlassian.com/x/yodKLg) in the requested
    projects.
  operationId: getCreateIssueMeta
  parameters:
    - name: projectIds
      in: query
      description: >-
        List of project IDs. This parameter accepts a comma-separated list.
        Multiple project IDs can also be provided using an ampersand-separated
        list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This
        parameter may be provided with `projectKeys`.
      schema:
        type: array
        items:
          type: string
    - name: projectKeys
      in: query
      description: >-
        List of project keys. This parameter accepts a comma-separated list.
        Multiple project keys can also be provided using an ampersand-separated
        list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This
        parameter may be provided with `projectIds`.
      schema:
        type: array
        items:
          type: string
    - name: issuetypeIds
      in: query
      description: >-
        List of issue type IDs. This parameter accepts a comma-separated list.
        Multiple issue type IDs can also be provided using an
        ampersand-separated list. For example,
        `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may
        be provided with `issuetypeNames`.
      schema:
        type: array
        items:
          type: string
    - name: issuetypeNames
      in: query
      description: >-
        List of issue type names. This parameter accepts a comma-separated list.
        Multiple issue type names can also be provided using an
        ampersand-separated list. For example,
        `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be
        provided with `issuetypeIds`.
      schema:
        type: array
        items:
          type: string
    - name: expand
      in: query
      description: >-
        Use [expand](#expansion) to include additional information about issue
        metadata in the response. This parameter accepts
        `projects.issuetypes.fields`, which returns information about the fields
        in the issue creation screen for each issue type. Fields hidden from the
        screen are not returned. Use the information to populate the `fields`
        and `update` fields in [Create issue](#api-rest-api-2-issue-post) and
        [Create issues](#api-rest-api-2-issue-bulk-post).
      schema:
        type: string
  responses:
    '200':
      description: Returned if the request is successful.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/IssueCreateMetadata.yaml
          example: >-
            {"projects":[{"self":"https://your-domain.atlassian.net/rest/api/2/project/ED","id":"10000","key":"ED","name":"Edison
            Project","avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000&avatarId=10011","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000&avatarId=10011","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000&avatarId=10011","48x48":"https://your-domain.atlassian.net/secure/projectavatar?pid=10000&avatarId=10011"},"issuetypes":[{"self":"https://your-domain.atlassian.net/rest/api/2/issueType/1","id":"1","description":"An
            error in the
            code","iconUrl":"https://your-domain.atlassian.net/images/icons/issuetypes/bug.png","name":"Bug","subtask":false,"fields":{"issuetype":{"required":true,"name":"Issue
            Type","key":"issuetype","hasDefaultValue":false,"operations":["set"]}}}]}]}
    '401':
      description: Returned if the authentication credentials are incorrect or missing.
  deprecated: false
  security:
    - basicAuth: []
    - OAuth2:
        - read:jira-work
    - {}
  x-atlassian-oauth2-scopes:
    - state: Current
      scheme: OAuth2
      scopes:
        - read:jira-work
    - state: Beta
      scheme: OAuth2
      scopes:
        - read:issue-meta:jira
        - read:avatar:jira
        - read:field-configuration:jira
  x-atlassian-connect-scope: READ
