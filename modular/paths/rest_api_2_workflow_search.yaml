get:
  tags:
    - Workflows
  summary: Get workflows paginated
  description: >-
    Returns a [paginated](#pagination) list of published classic workflows. When
    workflow names are specified, details of those workflows are returned.
    Otherwise, all published classic workflows are returned.


    This operation does not return next-gen workflows.


    **[Permissions](#permissions) required:** *Administer Jira* [global
    permission](https://confluence.atlassian.com/x/x4dKLg).
  operationId: getWorkflowsPaginated
  parameters:
    - name: startAt
      in: query
      description: >-
        The index of the first item to return in a page of results (page
        offset).
      schema:
        type: integer
        format: int64
        default: 0
    - name: maxResults
      in: query
      description: The maximum number of items to return per page.
      schema:
        type: integer
        format: int32
        default: 50
    - name: workflowName
      in: query
      description: >-
        The name of a workflow to return. To include multiple workflows, provide
        an ampersand-separated list. For example,
        `workflowName=name1&workflowName=name2`.
      schema:
        uniqueItems: true
        type: array
        items:
          type: string
    - name: expand
      in: query
      description: >-
        Use [expand](#expansion) to include additional information in the
        response. This parameter accepts a comma-separated list. Expand options
        include:

         *  `transitions` For each workflow, returns information about the transitions inside the workflow.
         *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.
         *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.
         *  `statuses` For each workflow, returns information about the statuses inside the workflow.
         *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.
         *  `default` For each workflow, returns information about whether this is the default workflow.
         *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.
         *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.
         *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.
         *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow.
      schema:
        type: string
    - name: queryString
      in: query
      description: >-
        String used to perform a case-insensitive partial match with workflow
        name.
      schema:
        type: string
    - name: orderBy
      in: query
      description: |-
        [Order](#ordering) the results by a field:

         *  `name` Sorts by workflow name.
         *  `created` Sorts by create time.
         *  `updated` Sorts by update time.
      schema:
        type: string
        enum:
          - name
          - '-name'
          - +name
          - created
          - '-created'
          - +created
          - updated
          - +updated
          - '-updated'
    - name: isActive
      in: query
      description: Filters active and inactive workflows.
      schema:
        type: boolean
  responses:
    '200':
      description: Returned if the request is successful.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/PageBeanWorkflow.yaml
          example: >-
            {"maxResults":1,"startAt":0,"total":5,"isLast":false,"values":[{"id":{"name":"SCRUM
            Workflow","entityId":"5ed312c5-f7a6-4a78-a1f6-8ff7f307d063"},"description":"A
            workflow used for Software projects in the SCRUM
            methodology","transitions":[{"id":"5","name":"In
            Progress","description":"Start working on the
            issue.","from":["10","13"],"to":"14","type":"directed","screen":{"id":"10000","name":"Issue
            screen"},"rules":{"conditionsTree":{"nodeType":"compound","operator":"AND","conditions":[{"nodeType":"simple","type":"PermissionCondition","configuration":{"permissionKey":"WORK_ON_ISSUES"}},{"nodeType":"simple","type":"PermissionCondition","configuration":{"permissionKey":"RESOLVE_ISSUES"}}]},"validators":[{"type":"FieldRequiredValidator","configuration":{"ignoreContext":true,"errorMessage":"A
            custom error
            message","fields":["description","assignee"]}}],"postFunctions":[{"type":"UpdateIssueStatusFunction"},{"type":"GenerateChangeHistoryFunction"},{"type":"FireIssueEventFunction"}]},"properties":{"jira.fieldscreen.id":1}}],"statuses":[{"id":"3","name":"In
            Progress","properties":{"jira.issue.editable":"false","issueEditable":false}}],"isDefault":false,"schemes":[{"id":"10001","name":"Test
            Workflow
            Scheme"}],"projects":[{"self":"project/EX","id":"10000","key":"EX","name":"Example","projectTypeKey":"ProjectTypeKey{key='software'}","simplified":false,"avatarUrls":{"48x48":"secure/projectavatar?size=large&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","16x16":"secure/projectavatar?size=xsmall&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"id":"10000","description":"Project
            category description","name":"A project
            category"}}],"hasDraftWorkflow":true,"operations":{"canEdit":true,"canDelete":false},"created":"2022-09-01T06:50:49.852+0000","updated":"2022-09-01T06:50:49.852+0000"}]}
    '401':
      description: Returned if the authentication credentials are incorrect or missing.
    '403':
      description: Returned if the user does not have the necessary permission.
      content:
        application/json:
          schema:
            $ref: ../components/schemas/ErrorCollection.yaml
          example: >-
            {"errorMessages":["Only Jira administrators can access
            workflows."],"errors":{}}
  deprecated: false
  security:
    - basicAuth: []
    - OAuth2:
        - manage:jira-project
  x-atlassian-oauth2-scopes:
    - state: Current
      scheme: OAuth2
      scopes:
        - manage:jira-project
    - state: Beta
      scheme: OAuth2
      scopes:
        - read:group:jira
        - read:issue-security-level:jira
        - read:project-role:jira
        - read:screen:jira
        - read:status:jira
        - read:user:jira
        - read:workflow:jira
        - read:webhook:jira
        - read:avatar:jira
        - read:project-category:jira
        - read:project:jira
  x-atlassian-connect-scope: ADMIN
